# source: https://us1.prisma.sh/tom-wu-9c4f0c/database/dev
# timestamp: Wed Oct 31 2018 12:26:29 GMT+0800 (CST)

type AggregateGeoPoint {
  count: Int!
}

type AggregateGeoSegment {
  count: Int!
}

type AggregatePost {
  count: Int!
}

type AggregateRunningDetails {
  count: Int!
}

type AggregateTimeSegment {
  count: Int!
}

type BatchPayload {
  """The number of nodes that have been affected by the Batch operation."""
  count: Long!
}

type GeoPoint implements Node {
  id: ID!
  longitude: String!
  latitude: String!
}

"""A connection to a list of items."""
type GeoPointConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [GeoPointEdge]!
  aggregate: AggregateGeoPoint!
}

input GeoPointCreateInput {
  longitude: String!
  latitude: String!
}

input GeoPointCreateOneInput {
  create: GeoPointCreateInput
  connect: GeoPointWhereUniqueInput
}

"""An edge in a connection."""
type GeoPointEdge {
  """The item at the end of the edge."""
  node: GeoPoint!

  """A cursor for use in pagination."""
  cursor: String!
}

enum GeoPointOrderByInput {
  id_ASC
  id_DESC
  longitude_ASC
  longitude_DESC
  latitude_ASC
  latitude_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type GeoPointPreviousValues {
  id: ID!
  longitude: String!
  latitude: String!
}

type GeoPointSubscriptionPayload {
  mutation: MutationType!
  node: GeoPoint
  updatedFields: [String!]
  previousValues: GeoPointPreviousValues
}

input GeoPointSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [GeoPointSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [GeoPointSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [GeoPointSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: GeoPointWhereInput
}

input GeoPointUpdateDataInput {
  longitude: String
  latitude: String
}

input GeoPointUpdateInput {
  longitude: String
  latitude: String
}

input GeoPointUpdateManyMutationInput {
  longitude: String
  latitude: String
}

input GeoPointUpdateOneInput {
  create: GeoPointCreateInput
  connect: GeoPointWhereUniqueInput
  disconnect: Boolean
  delete: Boolean
  update: GeoPointUpdateDataInput
  upsert: GeoPointUpsertNestedInput
}

input GeoPointUpsertNestedInput {
  update: GeoPointUpdateDataInput!
  create: GeoPointCreateInput!
}

input GeoPointWhereInput {
  """Logical AND on all given filters."""
  AND: [GeoPointWhereInput!]

  """Logical OR on all given filters."""
  OR: [GeoPointWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [GeoPointWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  longitude: String

  """All values that are not equal to given value."""
  longitude_not: String

  """All values that are contained in given list."""
  longitude_in: [String!]

  """All values that are not contained in given list."""
  longitude_not_in: [String!]

  """All values less than the given value."""
  longitude_lt: String

  """All values less than or equal the given value."""
  longitude_lte: String

  """All values greater than the given value."""
  longitude_gt: String

  """All values greater than or equal the given value."""
  longitude_gte: String

  """All values containing the given string."""
  longitude_contains: String

  """All values not containing the given string."""
  longitude_not_contains: String

  """All values starting with the given string."""
  longitude_starts_with: String

  """All values not starting with the given string."""
  longitude_not_starts_with: String

  """All values ending with the given string."""
  longitude_ends_with: String

  """All values not ending with the given string."""
  longitude_not_ends_with: String
  latitude: String

  """All values that are not equal to given value."""
  latitude_not: String

  """All values that are contained in given list."""
  latitude_in: [String!]

  """All values that are not contained in given list."""
  latitude_not_in: [String!]

  """All values less than the given value."""
  latitude_lt: String

  """All values less than or equal the given value."""
  latitude_lte: String

  """All values greater than the given value."""
  latitude_gt: String

  """All values greater than or equal the given value."""
  latitude_gte: String

  """All values containing the given string."""
  latitude_contains: String

  """All values not containing the given string."""
  latitude_not_contains: String

  """All values starting with the given string."""
  latitude_starts_with: String

  """All values not starting with the given string."""
  latitude_not_starts_with: String

  """All values ending with the given string."""
  latitude_ends_with: String

  """All values not ending with the given string."""
  latitude_not_ends_with: String
}

input GeoPointWhereUniqueInput {
  id: ID
}

type GeoSegment implements Node {
  id: ID!
  startPoint: GeoPoint
  endPoint: GeoPoint
  distance: Float
}

"""A connection to a list of items."""
type GeoSegmentConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [GeoSegmentEdge]!
  aggregate: AggregateGeoSegment!
}

input GeoSegmentCreateInput {
  distance: Float
  startPoint: GeoPointCreateOneInput
  endPoint: GeoPointCreateOneInput
}

input GeoSegmentCreateManyInput {
  create: [GeoSegmentCreateInput!]
  connect: [GeoSegmentWhereUniqueInput!]
}

"""An edge in a connection."""
type GeoSegmentEdge {
  """The item at the end of the edge."""
  node: GeoSegment!

  """A cursor for use in pagination."""
  cursor: String!
}

enum GeoSegmentOrderByInput {
  id_ASC
  id_DESC
  distance_ASC
  distance_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type GeoSegmentPreviousValues {
  id: ID!
  distance: Float
}

type GeoSegmentSubscriptionPayload {
  mutation: MutationType!
  node: GeoSegment
  updatedFields: [String!]
  previousValues: GeoSegmentPreviousValues
}

input GeoSegmentSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [GeoSegmentSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [GeoSegmentSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [GeoSegmentSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: GeoSegmentWhereInput
}

input GeoSegmentUpdateDataInput {
  distance: Float
  startPoint: GeoPointUpdateOneInput
  endPoint: GeoPointUpdateOneInput
}

input GeoSegmentUpdateInput {
  distance: Float
  startPoint: GeoPointUpdateOneInput
  endPoint: GeoPointUpdateOneInput
}

input GeoSegmentUpdateManyInput {
  create: [GeoSegmentCreateInput!]
  connect: [GeoSegmentWhereUniqueInput!]
  disconnect: [GeoSegmentWhereUniqueInput!]
  delete: [GeoSegmentWhereUniqueInput!]
  update: [GeoSegmentUpdateWithWhereUniqueNestedInput!]
  upsert: [GeoSegmentUpsertWithWhereUniqueNestedInput!]
}

input GeoSegmentUpdateManyMutationInput {
  distance: Float
}

input GeoSegmentUpdateWithWhereUniqueNestedInput {
  where: GeoSegmentWhereUniqueInput!
  data: GeoSegmentUpdateDataInput!
}

input GeoSegmentUpsertWithWhereUniqueNestedInput {
  where: GeoSegmentWhereUniqueInput!
  update: GeoSegmentUpdateDataInput!
  create: GeoSegmentCreateInput!
}

input GeoSegmentWhereInput {
  """Logical AND on all given filters."""
  AND: [GeoSegmentWhereInput!]

  """Logical OR on all given filters."""
  OR: [GeoSegmentWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [GeoSegmentWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  distance: Float

  """All values that are not equal to given value."""
  distance_not: Float

  """All values that are contained in given list."""
  distance_in: [Float!]

  """All values that are not contained in given list."""
  distance_not_in: [Float!]

  """All values less than the given value."""
  distance_lt: Float

  """All values less than or equal the given value."""
  distance_lte: Float

  """All values greater than the given value."""
  distance_gt: Float

  """All values greater than or equal the given value."""
  distance_gte: Float
  startPoint: GeoPointWhereInput
  endPoint: GeoPointWhereInput
}

input GeoSegmentWhereUniqueInput {
  id: ID
}

"""
The `Long` scalar type represents non-fractional signed whole numeric values.
Long can represent values between -(2^63) and 2^63 - 1.
"""
scalar Long

type Mutation {
  createPost(data: PostCreateInput!): Post!
  createRunningDetails(data: RunningDetailsCreateInput!): RunningDetails!
  createTimeSegment(data: TimeSegmentCreateInput!): TimeSegment!
  createGeoSegment(data: GeoSegmentCreateInput!): GeoSegment!
  createGeoPoint(data: GeoPointCreateInput!): GeoPoint!
  updatePost(data: PostUpdateInput!, where: PostWhereUniqueInput!): Post
  updateRunningDetails(data: RunningDetailsUpdateInput!, where: RunningDetailsWhereUniqueInput!): RunningDetails
  updateGeoSegment(data: GeoSegmentUpdateInput!, where: GeoSegmentWhereUniqueInput!): GeoSegment
  updateGeoPoint(data: GeoPointUpdateInput!, where: GeoPointWhereUniqueInput!): GeoPoint
  deletePost(where: PostWhereUniqueInput!): Post
  deleteRunningDetails(where: RunningDetailsWhereUniqueInput!): RunningDetails
  deleteGeoSegment(where: GeoSegmentWhereUniqueInput!): GeoSegment
  deleteGeoPoint(where: GeoPointWhereUniqueInput!): GeoPoint
  upsertPost(where: PostWhereUniqueInput!, create: PostCreateInput!, update: PostUpdateInput!): Post!
  upsertRunningDetails(where: RunningDetailsWhereUniqueInput!, create: RunningDetailsCreateInput!, update: RunningDetailsUpdateInput!): RunningDetails!
  upsertGeoSegment(where: GeoSegmentWhereUniqueInput!, create: GeoSegmentCreateInput!, update: GeoSegmentUpdateInput!): GeoSegment!
  upsertGeoPoint(where: GeoPointWhereUniqueInput!, create: GeoPointCreateInput!, update: GeoPointUpdateInput!): GeoPoint!
  updateManyPosts(data: PostUpdateManyMutationInput!, where: PostWhereInput): BatchPayload!
  updateManyRunningDetailses(data: RunningDetailsUpdateManyMutationInput!, where: RunningDetailsWhereInput): BatchPayload!
  updateManyTimeSegments(data: TimeSegmentUpdateManyMutationInput!, where: TimeSegmentWhereInput): BatchPayload!
  updateManyGeoSegments(data: GeoSegmentUpdateManyMutationInput!, where: GeoSegmentWhereInput): BatchPayload!
  updateManyGeoPoints(data: GeoPointUpdateManyMutationInput!, where: GeoPointWhereInput): BatchPayload!
  deleteManyPosts(where: PostWhereInput): BatchPayload!
  deleteManyRunningDetailses(where: RunningDetailsWhereInput): BatchPayload!
  deleteManyTimeSegments(where: TimeSegmentWhereInput): BatchPayload!
  deleteManyGeoSegments(where: GeoSegmentWhereInput): BatchPayload!
  deleteManyGeoPoints(where: GeoPointWhereInput): BatchPayload!
}

enum MutationType {
  CREATED
  UPDATED
  DELETED
}

"""An object with an ID"""
interface Node {
  """The id of the object."""
  id: ID!
}

"""Information about pagination in a connection."""
type PageInfo {
  """When paginating forwards, are there more items?"""
  hasNextPage: Boolean!

  """When paginating backwards, are there more items?"""
  hasPreviousPage: Boolean!

  """When paginating backwards, the cursor to continue."""
  startCursor: String

  """When paginating forwards, the cursor to continue."""
  endCursor: String
}

type Post implements Node {
  id: ID!
  isPublished: Boolean!
  title: String!
  text: String!
}

"""A connection to a list of items."""
type PostConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [PostEdge]!
  aggregate: AggregatePost!
}

input PostCreateInput {
  isPublished: Boolean
  title: String!
  text: String!
}

"""An edge in a connection."""
type PostEdge {
  """The item at the end of the edge."""
  node: Post!

  """A cursor for use in pagination."""
  cursor: String!
}

enum PostOrderByInput {
  id_ASC
  id_DESC
  isPublished_ASC
  isPublished_DESC
  title_ASC
  title_DESC
  text_ASC
  text_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type PostPreviousValues {
  id: ID!
  isPublished: Boolean!
  title: String!
  text: String!
}

type PostSubscriptionPayload {
  mutation: MutationType!
  node: Post
  updatedFields: [String!]
  previousValues: PostPreviousValues
}

input PostSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [PostSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [PostSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PostSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: PostWhereInput
}

input PostUpdateInput {
  isPublished: Boolean
  title: String
  text: String
}

input PostUpdateManyMutationInput {
  isPublished: Boolean
  title: String
  text: String
}

input PostWhereInput {
  """Logical AND on all given filters."""
  AND: [PostWhereInput!]

  """Logical OR on all given filters."""
  OR: [PostWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [PostWhereInput!]
  id: ID

  """All values that are not equal to given value."""
  id_not: ID

  """All values that are contained in given list."""
  id_in: [ID!]

  """All values that are not contained in given list."""
  id_not_in: [ID!]

  """All values less than the given value."""
  id_lt: ID

  """All values less than or equal the given value."""
  id_lte: ID

  """All values greater than the given value."""
  id_gt: ID

  """All values greater than or equal the given value."""
  id_gte: ID

  """All values containing the given string."""
  id_contains: ID

  """All values not containing the given string."""
  id_not_contains: ID

  """All values starting with the given string."""
  id_starts_with: ID

  """All values not starting with the given string."""
  id_not_starts_with: ID

  """All values ending with the given string."""
  id_ends_with: ID

  """All values not ending with the given string."""
  id_not_ends_with: ID
  isPublished: Boolean

  """All values that are not equal to given value."""
  isPublished_not: Boolean
  title: String

  """All values that are not equal to given value."""
  title_not: String

  """All values that are contained in given list."""
  title_in: [String!]

  """All values that are not contained in given list."""
  title_not_in: [String!]

  """All values less than the given value."""
  title_lt: String

  """All values less than or equal the given value."""
  title_lte: String

  """All values greater than the given value."""
  title_gt: String

  """All values greater than or equal the given value."""
  title_gte: String

  """All values containing the given string."""
  title_contains: String

  """All values not containing the given string."""
  title_not_contains: String

  """All values starting with the given string."""
  title_starts_with: String

  """All values not starting with the given string."""
  title_not_starts_with: String

  """All values ending with the given string."""
  title_ends_with: String

  """All values not ending with the given string."""
  title_not_ends_with: String
  text: String

  """All values that are not equal to given value."""
  text_not: String

  """All values that are contained in given list."""
  text_in: [String!]

  """All values that are not contained in given list."""
  text_not_in: [String!]

  """All values less than the given value."""
  text_lt: String

  """All values less than or equal the given value."""
  text_lte: String

  """All values greater than the given value."""
  text_gt: String

  """All values greater than or equal the given value."""
  text_gte: String

  """All values containing the given string."""
  text_contains: String

  """All values not containing the given string."""
  text_not_contains: String

  """All values starting with the given string."""
  text_starts_with: String

  """All values not starting with the given string."""
  text_not_starts_with: String

  """All values ending with the given string."""
  text_ends_with: String

  """All values not ending with the given string."""
  text_not_ends_with: String
}

input PostWhereUniqueInput {
  id: ID
}

type Query {
  posts(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [Post]!
  runningDetailses(where: RunningDetailsWhereInput, orderBy: RunningDetailsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [RunningDetails]!
  timeSegments(where: TimeSegmentWhereInput, orderBy: TimeSegmentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TimeSegment]!
  geoSegments(where: GeoSegmentWhereInput, orderBy: GeoSegmentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [GeoSegment]!
  geoPoints(where: GeoPointWhereInput, orderBy: GeoPointOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [GeoPoint]!
  post(where: PostWhereUniqueInput!): Post
  runningDetails(where: RunningDetailsWhereUniqueInput!): RunningDetails
  geoSegment(where: GeoSegmentWhereUniqueInput!): GeoSegment
  geoPoint(where: GeoPointWhereUniqueInput!): GeoPoint
  postsConnection(where: PostWhereInput, orderBy: PostOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): PostConnection!
  runningDetailsesConnection(where: RunningDetailsWhereInput, orderBy: RunningDetailsOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): RunningDetailsConnection!
  timeSegmentsConnection(where: TimeSegmentWhereInput, orderBy: TimeSegmentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): TimeSegmentConnection!
  geoSegmentsConnection(where: GeoSegmentWhereInput, orderBy: GeoSegmentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): GeoSegmentConnection!
  geoPointsConnection(where: GeoPointWhereInput, orderBy: GeoPointOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): GeoPointConnection!

  """Fetches an object given its ID"""
  node(
    """The ID of an object"""
    id: ID!
  ): Node
}

type RunningDetails {
  started: String
  runTimeSegments(where: TimeSegmentWhereInput, orderBy: TimeSegmentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [TimeSegment!]
  pathSegment(where: GeoSegmentWhereInput, orderBy: GeoSegmentOrderByInput, skip: Int, after: String, before: String, first: Int, last: Int): [GeoSegment!]
}

"""A connection to a list of items."""
type RunningDetailsConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [RunningDetailsEdge]!
  aggregate: AggregateRunningDetails!
}

input RunningDetailsCreateInput {
  started: String
  runTimeSegments: TimeSegmentCreateManyInput
  pathSegment: GeoSegmentCreateManyInput
}

"""An edge in a connection."""
type RunningDetailsEdge {
  """The item at the end of the edge."""
  node: RunningDetails!

  """A cursor for use in pagination."""
  cursor: String!
}

enum RunningDetailsOrderByInput {
  started_ASC
  started_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type RunningDetailsPreviousValues {
  started: String
}

type RunningDetailsSubscriptionPayload {
  mutation: MutationType!
  node: RunningDetails
  updatedFields: [String!]
  previousValues: RunningDetailsPreviousValues
}

input RunningDetailsSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [RunningDetailsSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [RunningDetailsSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RunningDetailsSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: RunningDetailsWhereInput
}

input RunningDetailsUpdateInput {
  started: String
  runTimeSegments: TimeSegmentUpdateManyInput
  pathSegment: GeoSegmentUpdateManyInput
}

input RunningDetailsUpdateManyMutationInput {
  started: String
}

input RunningDetailsWhereInput {
  """Logical AND on all given filters."""
  AND: [RunningDetailsWhereInput!]

  """Logical OR on all given filters."""
  OR: [RunningDetailsWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [RunningDetailsWhereInput!]
  started: String

  """All values that are not equal to given value."""
  started_not: String

  """All values that are contained in given list."""
  started_in: [String!]

  """All values that are not contained in given list."""
  started_not_in: [String!]

  """All values less than the given value."""
  started_lt: String

  """All values less than or equal the given value."""
  started_lte: String

  """All values greater than the given value."""
  started_gt: String

  """All values greater than or equal the given value."""
  started_gte: String

  """All values containing the given string."""
  started_contains: String

  """All values not containing the given string."""
  started_not_contains: String

  """All values starting with the given string."""
  started_starts_with: String

  """All values not starting with the given string."""
  started_not_starts_with: String

  """All values ending with the given string."""
  started_ends_with: String

  """All values not ending with the given string."""
  started_not_ends_with: String
  runTimeSegments_every: TimeSegmentWhereInput
  runTimeSegments_some: TimeSegmentWhereInput
  runTimeSegments_none: TimeSegmentWhereInput
  pathSegment_every: GeoSegmentWhereInput
  pathSegment_some: GeoSegmentWhereInput
  pathSegment_none: GeoSegmentWhereInput
}

input RunningDetailsWhereUniqueInput {
  started: String
}

type Subscription {
  post(where: PostSubscriptionWhereInput): PostSubscriptionPayload
  runningDetails(where: RunningDetailsSubscriptionWhereInput): RunningDetailsSubscriptionPayload
  timeSegment(where: TimeSegmentSubscriptionWhereInput): TimeSegmentSubscriptionPayload
  geoSegment(where: GeoSegmentSubscriptionWhereInput): GeoSegmentSubscriptionPayload
  geoPoint(where: GeoPointSubscriptionWhereInput): GeoPointSubscriptionPayload
}

type TimeSegment {
  startTime: String
  endTime: String
  duration: Int
}

"""A connection to a list of items."""
type TimeSegmentConnection {
  """Information to aid in pagination."""
  pageInfo: PageInfo!

  """A list of edges."""
  edges: [TimeSegmentEdge]!
  aggregate: AggregateTimeSegment!
}

input TimeSegmentCreateInput {
  startTime: String
  endTime: String
  duration: Int
}

input TimeSegmentCreateManyInput {
  create: [TimeSegmentCreateInput!]
}

"""An edge in a connection."""
type TimeSegmentEdge {
  """The item at the end of the edge."""
  node: TimeSegment!

  """A cursor for use in pagination."""
  cursor: String!
}

enum TimeSegmentOrderByInput {
  startTime_ASC
  startTime_DESC
  endTime_ASC
  endTime_DESC
  duration_ASC
  duration_DESC
  id_ASC
  id_DESC
  updatedAt_ASC
  updatedAt_DESC
  createdAt_ASC
  createdAt_DESC
}

type TimeSegmentPreviousValues {
  startTime: String
  endTime: String
  duration: Int
}

type TimeSegmentSubscriptionPayload {
  mutation: MutationType!
  node: TimeSegment
  updatedFields: [String!]
  previousValues: TimeSegmentPreviousValues
}

input TimeSegmentSubscriptionWhereInput {
  """Logical AND on all given filters."""
  AND: [TimeSegmentSubscriptionWhereInput!]

  """Logical OR on all given filters."""
  OR: [TimeSegmentSubscriptionWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TimeSegmentSubscriptionWhereInput!]

  """
  The subscription event gets dispatched when it's listed in mutation_in
  """
  mutation_in: [MutationType!]

  """
  The subscription event gets only dispatched when one of the updated fields names is included in this list
  """
  updatedFields_contains: String

  """
  The subscription event gets only dispatched when all of the field names included in this list have been updated
  """
  updatedFields_contains_every: [String!]

  """
  The subscription event gets only dispatched when some of the field names included in this list have been updated
  """
  updatedFields_contains_some: [String!]
  node: TimeSegmentWhereInput
}

input TimeSegmentUpdateManyInput {
  create: [TimeSegmentCreateInput!]
}

input TimeSegmentUpdateManyMutationInput {
  startTime: String
  endTime: String
  duration: Int
}

input TimeSegmentWhereInput {
  """Logical AND on all given filters."""
  AND: [TimeSegmentWhereInput!]

  """Logical OR on all given filters."""
  OR: [TimeSegmentWhereInput!]

  """Logical NOT on all given filters combined by AND."""
  NOT: [TimeSegmentWhereInput!]
  startTime: String

  """All values that are not equal to given value."""
  startTime_not: String

  """All values that are contained in given list."""
  startTime_in: [String!]

  """All values that are not contained in given list."""
  startTime_not_in: [String!]

  """All values less than the given value."""
  startTime_lt: String

  """All values less than or equal the given value."""
  startTime_lte: String

  """All values greater than the given value."""
  startTime_gt: String

  """All values greater than or equal the given value."""
  startTime_gte: String

  """All values containing the given string."""
  startTime_contains: String

  """All values not containing the given string."""
  startTime_not_contains: String

  """All values starting with the given string."""
  startTime_starts_with: String

  """All values not starting with the given string."""
  startTime_not_starts_with: String

  """All values ending with the given string."""
  startTime_ends_with: String

  """All values not ending with the given string."""
  startTime_not_ends_with: String
  endTime: String

  """All values that are not equal to given value."""
  endTime_not: String

  """All values that are contained in given list."""
  endTime_in: [String!]

  """All values that are not contained in given list."""
  endTime_not_in: [String!]

  """All values less than the given value."""
  endTime_lt: String

  """All values less than or equal the given value."""
  endTime_lte: String

  """All values greater than the given value."""
  endTime_gt: String

  """All values greater than or equal the given value."""
  endTime_gte: String

  """All values containing the given string."""
  endTime_contains: String

  """All values not containing the given string."""
  endTime_not_contains: String

  """All values starting with the given string."""
  endTime_starts_with: String

  """All values not starting with the given string."""
  endTime_not_starts_with: String

  """All values ending with the given string."""
  endTime_ends_with: String

  """All values not ending with the given string."""
  endTime_not_ends_with: String
  duration: Int

  """All values that are not equal to given value."""
  duration_not: Int

  """All values that are contained in given list."""
  duration_in: [Int!]

  """All values that are not contained in given list."""
  duration_not_in: [Int!]

  """All values less than the given value."""
  duration_lt: Int

  """All values less than or equal the given value."""
  duration_lte: Int

  """All values greater than the given value."""
  duration_gt: Int

  """All values greater than or equal the given value."""
  duration_gte: Int
}
